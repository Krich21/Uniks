Контрольні запитання

1. Які основні загрози безпеки додатків?
   Основними загрозами безпеки додатків є:
   - **SQL-ін'єкції (SQLi)** – введення шкідливих SQL-запитів у поля введення, що дозволяє отримати несанкціонований доступ до бази даних.
   - **Cross-Site Scripting (XSS)** – впровадження шкідливого JavaScript-коду, який може викрасти дані користувача або змінити вміст сторінки.
   - **Cross-Site Request Forgery (CSRF)** – змушує користувача виконувати небажані дії на веб-додатку, на якому він авторизований.
   - **Відсутність перевірки автентифікації та авторизації** – неправильне керування доступом може дозволити зловмисникам отримати привілеї адміністратора.
   - **Неправильне керування сесіями** – використання передбачуваних ідентифікаторів сесій або відсутність тайм-ауту.
   - **Небезпечне зберігання даних** – відсутність шифрування паролів і конфіденційних даних.
   
2. Як за допомогою браузера можна перевірити наявність уразливостей?
   - **Інструменти розробника (DevTools)**: вкладка "Console" та "Network" допомагають перевіряти помилки JavaScript, запити до серверу, а також знайти вразливі точки.
   - **Перевірка форм та введення даних**: у полях введення можна вводити спеціальні символи (`' OR 1=1 --`, `<script>alert('XSS')</script>`) і перевіряти реакцію додатка.
   - **Перехоплення запитів через Burp Suite**: дає змогу аналізувати трафік між клієнтом і сервером та виявляти потенційні уразливості.
   - **Перевірка заголовків HTTP**: використовуючи `curl -I <URL>`, можна перевірити, чи належним чином налаштовані заголовки безпеки (`Content-Security-Policy`, `X-Frame-Options`).
   - **Використання розширень безпеки (наприклад, Wappalyzer)**: допомагає визначити технології, що використовуються сайтом, і знайти потенційні слабкі місця.
   
3. Як Python допомагає у пошуку потенційних загроз у веб-додатках?
   - **Автоматизація сканування уразливостей**: Python має бібліотеки, такі як `requests`, `BeautifulSoup`, `Selenium`, які дозволяють автоматично перевіряти форми, заголовки HTTP та відповідь серверу.
   - **Створення скриптів для SQLi, XSS, CSRF-тестів**: використовуючи `requests` і `payloads`, можна автоматизувати атаку та аналіз реакції сервера.
   - **Використання бібліотек для аналізу безпеки**:
     - `sqlmap` – для виявлення SQL-ін'єкцій.
     - `xsser` – для тестування XSS-уразливостей.
     - `w3af` – фреймворк для комплексного аналізу безпеки веб-додатків.
   - **Використання Shodan API**: Python дозволяє використовувати Shodan для пошуку вразливих серверів і сервісів в інтернеті.
   - **Логування та моніторинг**: створення скриптів, які аналізують логи серверу, виявляють аномальні запити та автоматично сповіщають про можливі атаки.
   
4. Які методи захисту існують від SQL-ін'єкцій та XSS-атак?
   **Захист від SQL-ін'єкцій:**
   - **Використання підготовлених запитів (Prepared Statements)**: параметризовані запити у SQL запобігають виконанню шкідливого коду.
   - **Обмеження привілеїв користувачів БД**: обмеження прав користувачів бази даних мінімізує ризики.
   - **Фільтрація та валідація введених даних**: перевірка введених значень на коректність перед передачею в SQL-запит.
   - **Використання ORM (Object-Relational Mapping)**: такі бібліотеки, як SQLAlchemy, Django ORM, автоматично захищають від SQLi.
   
   **Захист від XSS:**
   - **Екранування (escaping) введених користувачем даних**: перетворення `<script>` на `&lt;script&gt;` перед відображенням.
   - **Використання Content Security Policy (CSP)**: обмеження виконання JavaScript тільки з дозволених джерел.
   - **Заборона вбудованих тегів (WYSIWYG-редактори)**: використання бібліотек на кшталт DOMPurify для очищення HTML-коду.
   - **HttpOnly та Secure Cookies**: запобігання доступу JavaScript до cookie-файлів, що містять сесійні дані.
   
   Виконання цих рекомендацій значно підвищить рівень безпеки веб-додатків.

